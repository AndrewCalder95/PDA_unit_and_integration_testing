{"ast":null,"code":"var _jsxFileName = \"/Users/user/codeclan_work/week_07/day_2/homework/src/containers/Calculator.js\";\nimport React, { useEffect, useState } from 'react';\nimport KeyPad from '../components/KeyPad';\nimport '../App.css';\n\nfunction App() {\n  const [previousTotal, setPreviousTotal] = useState(0);\n  const [runningTotal, setRunningTotal] = useState(0);\n  const [previousOperator, setPreviousOperator] = useState(null);\n  const [newTotal, setNewTotal] = useState(true);\n\n  const numberClick = number => {\n    let tempTotal = runningTotal;\n\n    if (runningTotal === 0 || newTotal) {\n      setPreviousTotal(runningTotal);\n      tempTotal = 0;\n      setNewTotal(false);\n    }\n\n    setRunningTotal(parseFloat(\"\" + tempTotal + number));\n  };\n\n  const handleDecimal = () => {\n    if (!runningTotal.toString().includes(\".\")) setRunningTotal(runningTotal + \".\");\n  };\n\n  const clearClick = () => {\n    if (runningTotal === 0) {\n      setPreviousOperator(null);\n      setPreviousTotal(null);\n    }\n\n    setRunningTotal(0);\n  };\n\n  const operatorClick = operator => {\n    // if there was a previous operator recorded as having been clicked, perform\n    // the operation for the previous operator\n    if (previousTotal && previousOperator) {\n      switch (previousOperator) {\n        case \"+\":\n          add(runningTotal);\n          break;\n\n        case \"-\":\n          subtract(runningTotal);\n          break;\n\n        case \"*\":\n          multiply(runningTotal);\n          break;\n\n        case \"/\":\n          divide(runningTotal);\n          break;\n      }\n    } // if the 'equals' button was clicked, clear the previous operator, otherwise\n    // record what the previous operator was\n\n\n    if (operator === \"=\") {\n      setPreviousOperator(null);\n    } else {\n      setPreviousOperator(operator);\n    } // replace the previous total with the current running total and flag that a\n    // new total has been calculated\n\n\n    setPreviousTotal(runningTotal);\n    setNewTotal(true);\n  };\n\n  const add = number => {\n    setRunningTotal(parseFloat(previousTotal) + parseFloat(number));\n  };\n\n  const subtract = number => {\n    setRunningTotal(parseFloat(previousTotal) - parseFloat(number));\n  };\n\n  const multiply = number => {\n    setRunningTotal(parseFloat(previousTotal) * parseFloat(number));\n  };\n\n  const divide = number => {\n    if (!number === \"0\") setRunningTotal(parseFloat(previousTotal) / parseFloat(number));else return \"error\";\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calculator\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"running-total\",\n    className: \"display\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, runningTotal), /*#__PURE__*/React.createElement(KeyPad, {\n    handleNumber: numberClick,\n    handleOperator: operatorClick,\n    handleClear: clearClick,\n    handleDecimal: handleDecimal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/user/codeclan_work/week_07/day_2/homework/src/containers/Calculator.js"],"names":["React","useEffect","useState","KeyPad","App","previousTotal","setPreviousTotal","runningTotal","setRunningTotal","previousOperator","setPreviousOperator","newTotal","setNewTotal","numberClick","number","tempTotal","parseFloat","handleDecimal","toString","includes","clearClick","operatorClick","operator","add","subtract","multiply","divide"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport KeyPad from '../components/KeyPad';\nimport '../App.css';\n\nfunction App() {\n\n  const [previousTotal, setPreviousTotal] = useState(0); \n  const [runningTotal , setRunningTotal] = useState(0); \n  const [previousOperator, setPreviousOperator] = useState(null); \n  const [newTotal, setNewTotal] = useState(true); \n\n  const numberClick =  (number) => {\n    \n    let tempTotal = runningTotal;\n    if ( runningTotal === 0 || newTotal){\n      setPreviousTotal(runningTotal)\n      tempTotal = 0\n      setNewTotal(false);\n    }\n\n    setRunningTotal(parseFloat(\"\" + tempTotal + number));\n  }\n\n  const handleDecimal = () => {\n    if(!runningTotal.toString().includes(\".\"))\n    setRunningTotal(runningTotal + \".\")\n  }\n\n  const clearClick = () => {\n    if (runningTotal === 0) {\n      setPreviousOperator(null);\n      setPreviousTotal(null);\n    }\n    setRunningTotal(0);\n  }\n\n  const operatorClick = (operator) => {\n    // if there was a previous operator recorded as having been clicked, perform\n      // the operation for the previous operator\n      if (previousTotal && previousOperator) {\n        switch (previousOperator) {\n          case \"+\":\n            add(runningTotal);\n            break;\n          case \"-\":\n            subtract(runningTotal);\n            break;\n          case \"*\":\n            multiply(runningTotal);\n            break;\n          case \"/\":\n            divide(runningTotal);\n            break;\n        }\n      }\n\n      // if the 'equals' button was clicked, clear the previous operator, otherwise\n      // record what the previous operator was\n      if (operator === \"=\") {\n        setPreviousOperator(null);\n      } else {\n        setPreviousOperator(operator);\n\n      }\n      // replace the previous total with the current running total and flag that a\n      // new total has been calculated\n      setPreviousTotal(runningTotal);\n      setNewTotal(true);\n  }\n\n  const add = (number) => {\n    setRunningTotal(parseFloat(previousTotal) + parseFloat(number));\n  }\n\n  const subtract = (number) => {\n    setRunningTotal(parseFloat(previousTotal) - parseFloat(number));\n  }\n\n  const multiply = (number) => {\n    setRunningTotal(parseFloat(previousTotal) * parseFloat(number));\n  }\n\n  const divide = (number) => {\n    if (!number === \"0\")\n      setRunningTotal(parseFloat(previousTotal) / parseFloat(number));\n    else\n    return \"error\"\n  }\n\n\n  return (\n    <div className=\"container\">\n    <div className=\"calculator\">\n      <div id=\"running-total\" className=\"display\">{ runningTotal }</div>\n      <KeyPad \n      handleNumber={numberClick} \n      handleOperator={operatorClick} \n      handleClear={clearClick}\n      handleDecimal={handleDecimal}\n      />\n    </div>\n  </div>\n  );\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}